# Start SSH Agent
#----------------------------

SSH_ENV="$HOME/.ssh/environment"

. "$HOME/.local/bin/env"

# Added by LM Studio CLI (lms)
export PATH="$PATH:/Users/zaye/.lmstudio/bin"
# End of LM Studio CLI section

# aliases
alias .="cd ../"
alias ..="cd ../../"
alias ...="cd ../../../"
alias ....="cd ../../../../"
alias .....="cd ../../../../../"
alias ......="cd ../../../../../../"
alias .......="cd ../../../../../../../"
# copy folder with contents
alias cpfd="cp -R"

alias cm="chezmoi"
alias nv="nvim ."
alias lg="lazygit"

alias lgcm="lazygit -p ~/.local/share/chezmoi"

alias cdCog="cd ~/Desktop/cognitive-core"
alias nvCog="nvim ~/Desktop/cognitive-core"
alias lgCog="lazygit -p ~/Desktop/cognitive-core"
alias startCog="docker-compose -f ~/Desktop/cognitive-core/docker-compose.dev.yml up --remove-orphans"
alias stopCog="docker-compose -f ~/Desktop/cognitive-core/docker-compose.dev.yml down --remove-orphans"

alias cdEdapt="cd ~/Desktop/webapp-rebuild"
alias nvEdapt="nvim ~/Desktop/webapp-rebuild"
alias lgEdapt="lazygit -p ~/Desktop/webapp-rebuild"

alias cdPortfolio="cd ~/Desktop/Portfolio24/"
alias nvPortfolio="nvim ~/Desktop/Portfolio24"
alias lgPortfolio="lazygit -p ~/Desktop/Portfolio24"

alias cdNvim="cd ~/AppData/Local/nvim"
alias nvNvim="nvim ~/AppData/Local/nvim"
alias lgNvim="lazygit -p ~/AppData/Local/nvim"

alias nvBash="nvim ~/.bashrc"
alias cdDesktop="cd ~/Desktop"

alias cdScripts="cd ~/Documents/Obsidian/The\ Lab/System/Assets/Scripts"
alias nvScripts="nvim ~/Documents/Obsidian/The\ Lab/System/Assets/Scripts"

alias cdPlugins="cd ~/Documents/Obsidian/The\ Lab/.obsidian/plugins"
alias nvPlugins="nvim ~/Documents/Obsidian/The\ Lab/.obsidian/plugins"

alias cdDaily="cd ~/Documents/Obsidian/The\ Lab/Logs/Daily"
alias nvDaily="nvim ~/Documents/Obsidian/The\ Lab/Logs/Daily"

alias cdVault="cd ~/Documents/Obsidian/The\ Lab/"
alias nvVault="nvim ~/Documents/Obsidian/The\ Lab/"

function hex_to_decimal_ip() {
  local hex_ip="$1"
  
  # Check if a hexadecimal IP is provided
  if [ -z "$hex_ip" ]; then
    echo "Usage: hex_to_decimal_ip <HEX_IP>"
    return 1
  fi

  # Remove '0x' prefix if present
  hex_ip="${hex_ip#0x}"

  # Split the hexadecimal IP into four 2-character segments
  local seg1="${hex_ip:0:2}"
  local seg2="${hex_ip:2:2}"
  local seg3="${hex_ip:4:2}"
  local seg4="${hex_ip:6:2}"

  # Convert each segment from hexadecimal to decimal
  local decimal_seg1=$((16#$seg1))
  local decimal_seg2=$((16#$seg2))
  local decimal_seg3=$((16#$seg3))
  local decimal_seg4=$((16#$seg4))

  # Create the decimal IP address by joining the segments with dots
  local decimal_ip="$decimal_seg1.$decimal_seg2.$decimal_seg3.$decimal_seg4"

  echo "$decimal_ip"
}
function network_info() {
  local interface="$1"
  
  # Check if the interface name is provided
  if [ -z "$interface" ]; then
    echo "Usage: parse_network_info <INTERFACE_NAME>"
    return 1
  fi

  # Use ifconfig to retrieve network information
  local ifconfig_output
  ifconfig_output=$(ifconfig "$interface" 2>/dev/null)

  # Check if the interface exists and is active
  if [ -z "$ifconfig_output" ]; then
    echo "Interface '$interface' not found or not active."
    return 1
  fi

  # Parse and display IPv4 address, netmask, and default gateway
  local ipv4_address
  ipv4_address=$(echo "$ifconfig_output" | grep -oE 'inet (addr:)?[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+' | awk '{print $2}')
  
  local netmask
  netmask=$(echo "$ifconfig_output" | grep -o 'netmask 0x[0-9a-f]*' | awk '{print $2}' | cut -c3- | awk '{gsub(/^0[xX]/,""); print}')
  
  local default_gateway
  default_gateway=$(route -n get default | grep 'gateway:' | awk '{print $2}')

  # Display the parsed network information
  echo "Interface...............: $interface"
  echo "IPv4 Address............: $ipv4_address"
  echo "Subnet Mask.............: $(hex_to_decimal_ip $netmask)"
  echo "Default Gateway.........: $default_gateway"
}

function run_ssh_env {
  . "${SSH_ENV}" >/dev/null
}

function start_ssh_agent {
  echo "Initializing new SSH agent..."
  ssh-agent | sed 's/^echo/#echo/' >"${SSH_ENV}"
  echo "succeeded"
  chmod 600 "${SSH_ENV}"

  run_ssh_env

  ssh-add ~/.ssh/github
}

if [ -f "${SSH_ENV}" ]; then
  run_ssh_env
  ps -ef | grep ${SSH_AGENT_PID} | grep ssh-agent$ >/dev/null || {
    start_ssh_agent
  }
else
  start_ssh_agent
fi

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"                   # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion" # This loads nvm bash_completion
export STARSHIP_CONFIG=~/.config/starship.toml

eval "$(starship init bash)"
