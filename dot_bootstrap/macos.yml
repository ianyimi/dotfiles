---
- name: Machine setup (MacOS)
  hosts: localhost
  become: true
  connection: local
  vars:
    flyctl_version: "0.1.130"
    pulumi_version: "v3.94.2"

  tasks:
    - name: Get my user
      ansible.builtin.set_fact:
        remote_regular_user: "{{ ansible_env.SUDO_USER or ansible_user_id }}"

    - name: Determine the path to zsh
      ansible.builtin.shell: "command -v zsh"
      register: zsh_path
      changed_when: false

    - name: Ensure zsh is installed
      become: false
      ansible.builtin.package:
        name: zsh
        state: present

    - name: Change shell to zsh
      ansible.builtin.user:
        name: "{{ remote_regular_user }}"
        shell: "{{ zsh_path.stdout }}"
      when: zsh_path.stdout != ""

- name: Brew Install (Apps)
  hosts: localhost
  become: false
  gather_facts: false
  environment:
    HOMEBREW_NO_ANALYTICS: "1"
  tasks:
    - name: Check Install - Spotify
      community.general.homebrew:
        name: spotify
        state: present

    - name: Check Install - Vivaldi
      community.general.homebrew_cask:
        name: vivaldi
        state: present

    # - name: Check Install - Arc Browser
    #   community.general.homebrew:
    #     name: arc
    #     state: present

    # - name: Check Install - Zen Browser
    #   community.general.homebrew_cask:
    #     name: zen-browser
    #     state: present

    - name: Check Install - Keymapp
      community.general.homebrew:
        name: keymapp
        state: present

    - name: Check Install - Obsidian
      community.general.homebrew:
        name: obsidian
        state: present

    - name: Check Install - Ghostty
      become: false
      environment:
        HOMEBREW_NO_ANALYTICS: "1"
      community.general.homebrew_cask:
        name: 
          - ghostty
        state: present

- name: Brew Install (CLI)
  hosts: localhost
  become: false
  environment:
    HOMEBREW_NO_ANALYTICS: "1"
  tasks:
    - name: Check Install - Git
      community.general.homebrew:
        name: git
        state: present

    - name: Check Install - Tailscale
      community.general.homebrew:
        name: tailscale
        state: present

    - name: Check Install - Zsh AutoSuggestions
      community.general.homebrew:
        name: zsh-autosuggestions
        state: present

    - name: Check Install - Zsh Syntax Highlighting
      community.general.homebrew:
        name: zsh-syntax-highlighting
        state: present

    - name: Check Install - fzf
      community.general.homebrew:
        name: fzf
        state: present

    # - name: Check Install - Corepack
    #   community.general.homebrew:
    #     name: corepack
    #     state: present

    - name: Check Install - Starship
      community.general.homebrew:
        name: starship
        state: present

    - name: Check Install - Luarocks
      community.general.homebrew:
        name: luarocks
        state: present

    - name: Check Install - Lunajson
      ansible.builtin.command: luarocks install lunajson

    - name: Check Install - pnpm
      block:
        - name: Check if pnpm is already installed
          ansible.builtin.command: pnpm --version
          register: pnpm_check
          failed_when: false
          changed_when: false

        - name: Debug pnpm installation status
          ansible.builtin.debug:
            msg: "pnpm is already installed, version: {{ pnpm_check.stdout }}"
          when: pnpm_check.rc == 0

        - name: Install pnpm if not installed
          ansible.builtin.shell: "curl -fsSL https://get.pnpm.io/install.sh | sh -"
          args:
            creates: "{{ ansible_env.HOME }}/.local/share/pnpm"
          environment:
            PNPM_HOME: "{{ ansible_env.HOME }}/.local/share/pnpm"
          when: pnpm_check.rc != 0

        - name: Ensure pnpm is in the PATH
          ansible.builtin.lineinfile:
            path: ~/.zshrc
            line: 'export PATH="$HOME/.local/share/pnpm:$PATH"'
            insertafter: EOF
            state: present
          when: pnpm_check.rc != 0

        - name: Reload shell configuration
          ansible.builtin.shell: source ~/.zshrc
          args:
            executable: /bin/zsh
          when: pnpm_check.rc != 0

    - name: Check Install - Neovim
      community.general.homebrew:
        name: neovim
        state: present

    - name: Check Install - node.js
      community.general.homebrew:
        name: node
        state: present

    - name: Check Install - GitHub CLI
      community.general.homebrew:
        name: gh
        state: present

    - name: Ensure GitHub Dash extension is installed
      block:
        - name: Check if GitHub Dash extension is installed
          command: gh extension list --version
          register: gh_dash_version
          changed_when: false
          ignore_errors: true

        - name: Install GitHub Dash extension if not present
          command: gh extension install dlvhdr/gh-dash
          when: gh_dash_version.rc != 0

    - name: Check Install - Tmux
      community.general.homebrew:
        name: tmux
        state: present

    - name: Check Install - Tmuxinator
      community.general.homebrew:
        name: tmuxinator
        state: present

    - name: Check Install - Neofetch
      community.general.homebrew:
        name: neofetch
        state: present

    - name: Check Install - curl
      community.general.homebrew:
        name: npm
        state: present

    - name: Check Install - npm
      community.general.homebrew:
        name: npm
        state: present
    - name: Check Install - RipGrep
      community.general.homebrew:
        name: ripgrep
        state: present

    - name: Check Install - Aerospace
      become: false
      environment:
        HOMEBREW_NO_ANALYTICS: "1"
      community.general.homebrew_cask:
        name: 
          - nikitabobko/tap/aerospace
        state: present

    - name: Check if Aerospace is running
      become: false
      shell: "pgrep -f 'Aerospace'"
      register: aerospace_status
      failed_when: false
      changed_when: false

    - name: Start Aerospace if not running
      become: false
      shell: "open -a Aerospace"
      when: aerospace_status.rc != 0

    - name: Tap FelixKratz formulae
      become: false
      community.general.homebrew_tap:
        name: FelixKratz/formulae
        state: present

    - name: Check Install - SketchyBar
      become: false
      ignore_errors: true
      community.general.homebrew:
        name: sketchybar
        state: present

    # - name: Check Install - SketchyBar App Font
    #   become: false
    #   community.general.homebrew_cask:
    #     name: font-sketchybar-app-font
    #     state: present

    - name: Check if SketchyBar is running
      become: false
      shell: "pgrep -x sketchybar"
      register: sketchybar_status
      failed_when: false
      changed_when: false

    - name: Start SketchyBar if not running
      become: false
      shell: "sketchybar --restart"
      when: sketchybar_status.rc != 0

- name: Clone SketchyBar App Font Repository
  hosts: localhost
  become: false
  tasks:
    - name: Ensure packages directory exists
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/packages"
        state: directory
        mode: '0755'

    - name: Check if sketchybar-app-font repository exists
      ansible.builtin.stat:
        path: "{{ ansible_env.HOME }}/packages/sketchybar-app-font"
      register: sketchybar_app_font_stat

    - name: Clone sketchybar-app-font repository
      ignore_errors: true
      ansible.builtin.git:
        repo: "https://github.com/kvndrsslr/sketchybar-app-font.git"
        dest: "{{ ansible_env.HOME }}/packages/sketchybar-app-font"
        version: "HEAD"
        force: no
      when: not sketchybar_app_font_stat.stat.exists

- name: Update SketchyBar App Font
  hosts: localhost
  become: false
  tasks:
    - name: Update sketchybar-app-font dependencies
      when: not sketchybar_app_font_stat.stat.exists
      ansible.builtin.command: pnpm install
      args:
        chdir: "{{ ansible_env.HOME }}/packages/sketchybar-app-font"
      environment:
        PATH: "{{ ansible_env.HOME }}/.local/share/pnpm:{{ ansible_env.PATH }}"
    - name: Ensure sketchybar scripts directory exists
      when: not sketchybar_app_font_stat.stat.exists
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/.config/sketchybar/scripts"
        state: directory
        mode: '0755'
    - name: Ensure my-script.sh exists with icon map markers
      when: not sketchybar_app_font_stat.stat.exists
      ansible.builtin.copy:
        dest: "{{ ansible_env.HOME }}/.config/sketchybar/scripts/my-script.sh"
        content: |
          ### START-OF-ICON-MAP
          # Here be the function
          ### END-OF-ICON-MAP
        mode: '0755'
    - name: Build and install latest sketchybar-app-font and update icon map script
      when: not sketchybar_app_font_stat.stat.exists
      ansible.builtin.command: pnpm run build:install "{{ ansible_env.HOME }}/.config/sketchybar/scripts/my-script.sh"
      args:
        chdir: "{{ ansible_env.HOME }}/packages/sketchybar-app-font"
      environment:
        PATH: "{{ ansible_env.HOME }}/.local/share/pnpm:{{ ansible_env.PATH }}"

- name: Generate app_icons.lua file from icon_map.lua in dist folder
  hosts: localhost
  gather_facts: true
  tasks:
    - name: Ensure ~/.config/sketchybar/helpers directory exists
      when: not sketchybar_app_font_stat.stat.exists
      file:
        path: "{{ ansible_env.HOME }}/.config/sketchybar/helpers"
        state: directory
        mode: "0755"
    - name: Copy icon_map.lua to app_icons.lua in helpers folder
      when: not sketchybar_app_font_stat.stat.exists
      copy:
        src: "{{ ansible_env.HOME }}/packages/sketchybar-app-font/dist/icon_map.lua"
        dest: "{{ ansible_env.HOME }}/.config/sketchybar/helpers/app_icons.lua"
        mode: '0644'
    - name: Restart SketchyBar to apply new icon configurations
      ansible.builtin.shell: "sketchybar --reload"

- name: Brew Install (Languages)
  hosts: localhost
  become: false
  gather_facts: false
  environment:
    HOMEBREW_NO_ANALYTICS: "1"
  tasks:
    - name: Check Install - Lua
      community.general.homebrew:
        name: lua
        state: present

    - name: Check Install - C
      community.general.homebrew:
        name: c
        state: present

- name: Brew Install (Fonts)
  hosts: localhost
  become: false
  gather_facts: false
  environment:
    HOMEBREW_NO_ANALYTICS: "1"
    tasks:
    - name: Check Install - Cascadia Code Font
      become: false
      environment:
        HOMEBREW_NO_ANALYTICS: "1"
      community.general.homebrew_cask:
        name: 
          - font-cascadia-code
        state: present

    - name: Check Install - Hack Nerd Font (SketchyBar)
      become: false
      environment:
        HOMEBREW_NO_ANALYTICS: "1"
      community.general.homebrew_cask:
        name: 
          - font-hack-nerd-font
        state: present

- name: GitHub SSH Key Setup
  hosts: localhost
  become: false
  gather_facts: false
  tasks:
    - name: Check if Git user name is configured
      ansible.builtin.command: "git config --global --get user.name"
      register: git_user_name
      ignore_errors: true
      changed_when: false

    - name: Check if SSH key already exists
      ansible.builtin.stat:
        path: "{{ ansible_env.HOME }}/.ssh/id_ed25519"
      register: ssh_key

    - name: Set up GitHub SSH key (only if no Git user and no SSH key)
      when: git_user_name.rc != 0 and not ssh_key.stat.exists
      block:
        - name: Prompt for GitHub email
          ansible.builtin.pause:
            prompt: "Enter your GitHub email for the SSH key"
          register: github_email

        - name: Generate a new SSH key
          ansible.builtin.command:
            cmd: "ssh-keygen -t ed25519 -C '{{ github_email.user_input }}' -f {{ ansible_env.HOME }}/.ssh/id_ed25519 -N ''"
          register: keygen_output
          changed_when: keygen_output.rc == 0

        - name: Start the SSH agent
          ansible.builtin.command: eval "$(ssh-agent -s)"
          changed_when: false

        - name: Add SSH key to the macOS Keychain
          ansible.builtin.command:
            cmd: "ssh-add --apple-use-keychain {{ ansible_env.HOME }}/.ssh/id_ed25519"
          changed_when: false

        - name: Read the SSH public key
          ansible.builtin.command:
            cmd: "cat {{ ansible_env.HOME }}/.ssh/id_ed25519.pub"
          register: ssh_pub_key

        - name: Print the SSH public key
          ansible.builtin.debug:
            msg: |
              Your new GitHub SSH public key is:
              {{ ssh_pub_key.stdout }}
              
              Please copy this key and paste it into GitHub under:
              Settings > SSH and GPG Keys > New SSH Key.

        - name: Wait for user confirmation to proceed
          ansible.builtin.pause:
            prompt: "Press Enter once you have pasted the SSH key into GitHub and saved it."

        - name: Test GitHub SSH connection
          ansible.builtin.command: "ssh -T git@github.com"
          register: github_test
          failed_when: github_test.rc != 1
          changed_when: false
          ignore_errors: true

        - name: Display GitHub SSH connection test result
          ansible.builtin.debug:
            msg: |
              GitHub SSH Test Result:
              {{ github_test.stderr }}
              
              If you see 'successfully authenticated' or similar, your SSH setup is complete!

    - name: Skip SSH setup if Git user is already configured
      ansible.builtin.debug:
        msg: "Git user is already configured. Skipping SSH key setup."
      when: git_user_name.rc == 0
